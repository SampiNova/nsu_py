import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import zoom
import cv2

# Установка устройства (GPU если доступно)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Загрузка предобученной модели ResNet50
model = models.resnet50(pretrained=True).to(device)
model.eval()

# Трансформация изображения
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Функция для получения карты признаков слоя layer4
def get_features_map(model, layer_name):
    def hook(module, input, output):
        features_map.append(output)

    features_map = []
    hook_handle = getattr(model, layer_name).register_forward_hook(hook)

    return features_map, hook_handle


# Функция для визуализации
def visualize(image_path):
    img = Image.open(image_path).convert('RGB')
    img_tensor = transform(img).unsqueeze(0).to(device)

    # Извлечение карты признаков
    features_maps, hook_handle = get_features_map(model, 'layer4')
    with torch.no_grad():
        outputs = model(img_tensor)
        _, predicted_class = torch.max(outputs, 1)
        predicted_class = predicted_class.item()  # Получаем индекс предсказанного класса
        weights = model.fc.weight.cpu().detach().numpy()

    # Суммирование карт признаков с весами (ИЗМЕНЕНО)
    features_maps_numpy = features_maps[0][0].cpu().detach().numpy()  # Преобразуем все карты сразу
    cam = np.zeros_like(features_maps_numpy[0, :, :])  # Инициализируем с правильной формой

    for i in range(features_maps_numpy.shape[0]):
        cam += weights[predicted_class, i] * features_maps_numpy[i, :, :]

    img_size = img.size
    cam = zoom(cam, (img_size[1] / cam.shape[0], img_size[0] / cam.shape[1]), order=1)  # Билинейная интерполяция
    # Нормализация для отображения
    cam = np.maximum(cam, 0)
    cam = cam / cam.max()

    # Визуализация
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(img)
    plt.title('Исходное изображение')
    plt.subplot(1, 2, 2)
    plt.imshow(img)
    plt.imshow(cam, cmap='inferno', alpha=0.8)
    plt.title('Карта активации')
    plt.show()

# Пример использования
image_path = 'image.jpg' # Замените на путь к вашему изображению
visualize(image_path)

